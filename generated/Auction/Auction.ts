// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AuctionInitialized extends ethereum.Event {
  get params(): AuctionInitialized__Params {
    return new AuctionInitialized__Params(this);
  }
}

export class AuctionInitialized__Params {
  _event: AuctionInitialized;

  constructor(event: AuctionInitialized) {
    this._event = event;
  }

  get nftAdress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nftSellerAdress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get minprice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get interval(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class BidMade extends ethereum.Event {
  get params(): BidMade__Params {
    return new BidMade__Params(this);
  }
}

export class BidMade__Params {
  _event: BidMade;

  constructor(event: BidMade) {
    this._event = event;
  }

  get nftAdress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get bidMakerAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ReceiveWinningBidAfterAuction extends ethereum.Event {
  get params(): ReceiveWinningBidAfterAuction__Params {
    return new ReceiveWinningBidAfterAuction__Params(this);
  }
}

export class ReceiveWinningBidAfterAuction__Params {
  _event: ReceiveWinningBidAfterAuction;

  constructor(event: ReceiveWinningBidAfterAuction) {
    this._event = event;
  }

  get nftAdress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nftsellerAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get winningBid(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class WinNftAfterAuction extends ethereum.Event {
  get params(): WinNftAfterAuction__Params {
    return new WinNftAfterAuction__Params(this);
  }
}

export class WinNftAfterAuction__Params {
  _event: WinNftAfterAuction;

  constructor(event: WinNftAfterAuction) {
    this._event = event;
  }

  get nftAdress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nftWinnerAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get finalPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class WithdrawNftAfterAuctionUnsuccesful extends ethereum.Event {
  get params(): WithdrawNftAfterAuctionUnsuccesful__Params {
    return new WithdrawNftAfterAuctionUnsuccesful__Params(this);
  }
}

export class WithdrawNftAfterAuctionUnsuccesful__Params {
  _event: WithdrawNftAfterAuctionUnsuccesful;

  constructor(event: WithdrawNftAfterAuctionUnsuccesful) {
    this._event = event;
  }

  get nftAdress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nftsellerAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Auction__nftContractAuctionsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Address;
  value5: Address;
  value6: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Address,
    value5: Address,
    value6: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    return map;
  }

  getI_interval(): BigInt {
    return this.value0;
  }

  getMinPrice(): BigInt {
    return this.value1;
  }

  getS_lastTimeStamp(): BigInt {
    return this.value2;
  }

  getTemporaryHighestBid(): BigInt {
    return this.value3;
  }

  getCurrentWinner(): Address {
    return this.value4;
  }

  getNftSeller(): Address {
    return this.value5;
  }

  getAuctionStarted(): boolean {
    return this.value6;
  }
}

export class Auction extends ethereum.SmartContract {
  static bind(address: Address): Auction {
    return new Auction("Auction", address);
  }

  getAmountFundedByAnAddress(
    _nftContractAddress: Address,
    _tokenId: BigInt,
    sender: Address
  ): BigInt {
    let result = super.call(
      "getAmountFundedByAnAddress",
      "getAmountFundedByAnAddress(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_nftContractAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromAddress(sender)
      ]
    );

    return result[0].toBigInt();
  }

  try_getAmountFundedByAnAddress(
    _nftContractAddress: Address,
    _tokenId: BigInt,
    sender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAmountFundedByAnAddress",
      "getAmountFundedByAnAddress(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_nftContractAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromAddress(sender)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBeginningPriceOfTheNft(
    _nftContractAddress: Address,
    _tokenId: BigInt
  ): BigInt {
    let result = super.call(
      "getBeginningPriceOfTheNft",
      "getBeginningPriceOfTheNft(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_nftContractAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBeginningPriceOfTheNft(
    _nftContractAddress: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBeginningPriceOfTheNft",
      "getBeginningPriceOfTheNft(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_nftContractAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBidOfAnAddress(
    _nftContractAddress: Address,
    _tokenId: BigInt,
    sender: Address
  ): BigInt {
    let result = super.call(
      "getBidOfAnAddress",
      "getBidOfAnAddress(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_nftContractAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromAddress(sender)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBidOfAnAddress(
    _nftContractAddress: Address,
    _tokenId: BigInt,
    sender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBidOfAnAddress",
      "getBidOfAnAddress(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_nftContractAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromAddress(sender)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentWinner(_nftContractAddress: Address, _tokenId: BigInt): Address {
    let result = super.call(
      "getCurrentWinner",
      "getCurrentWinner(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_nftContractAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return result[0].toAddress();
  }

  try_getCurrentWinner(
    _nftContractAddress: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getCurrentWinner",
      "getCurrentWinner(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_nftContractAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getIntervalOfNftAuction(
    _nftContractAddress: Address,
    _tokenId: BigInt
  ): BigInt {
    let result = super.call(
      "getIntervalOfNftAuction",
      "getIntervalOfNftAuction(address,uint256):(uint32)",
      [
        ethereum.Value.fromAddress(_nftContractAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getIntervalOfNftAuction(
    _nftContractAddress: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getIntervalOfNftAuction",
      "getIntervalOfNftAuction(address,uint256):(uint32)",
      [
        ethereum.Value.fromAddress(_nftContractAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSellerOfTheNft(_nftContractAddress: Address, _tokenId: BigInt): Address {
    let result = super.call(
      "getSellerOfTheNft",
      "getSellerOfTheNft(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_nftContractAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return result[0].toAddress();
  }

  try_getSellerOfTheNft(
    _nftContractAddress: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSellerOfTheNft",
      "getSellerOfTheNft(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_nftContractAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSpecificAddress(
    _nftContractAddress: Address,
    _tokenId: BigInt,
    index: BigInt
  ): Address {
    let result = super.call(
      "getSpecificAddress",
      "getSpecificAddress(address,uint256,uint256):(address)",
      [
        ethereum.Value.fromAddress(_nftContractAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getSpecificAddress(
    _nftContractAddress: Address,
    _tokenId: BigInt,
    index: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSpecificAddress",
      "getSpecificAddress(address,uint256,uint256):(address)",
      [
        ethereum.Value.fromAddress(_nftContractAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getStartingTimeOfAuction(
    _nftContractAddress: Address,
    _tokenId: BigInt
  ): BigInt {
    let result = super.call(
      "getStartingTimeOfAuction",
      "getStartingTimeOfAuction(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_nftContractAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getStartingTimeOfAuction(
    _nftContractAddress: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStartingTimeOfAuction",
      "getStartingTimeOfAuction(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_nftContractAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStateOfAuction(_nftContractAddress: Address, _tokenId: BigInt): boolean {
    let result = super.call(
      "getStateOfAuction",
      "getStateOfAuction(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_nftContractAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return result[0].toBoolean();
  }

  try_getStateOfAuction(
    _nftContractAddress: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getStateOfAuction",
      "getStateOfAuction(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_nftContractAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getTemporaryHighestBid(
    _nftContractAddress: Address,
    _tokenId: BigInt
  ): BigInt {
    let result = super.call(
      "getTemporaryHighestBid",
      "getTemporaryHighestBid(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_nftContractAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTemporaryHighestBid(
    _nftContractAddress: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTemporaryHighestBid",
      "getTemporaryHighestBid(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_nftContractAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nftContractAuctions(
    param0: Address,
    param1: BigInt
  ): Auction__nftContractAuctionsResult {
    let result = super.call(
      "nftContractAuctions",
      "nftContractAuctions(address,uint256):(uint32,uint256,uint256,uint256,address,address,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new Auction__nftContractAuctionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toAddress(),
      result[6].toBoolean()
    );
  }

  try_nftContractAuctions(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Auction__nftContractAuctionsResult> {
    let result = super.tryCall(
      "nftContractAuctions",
      "nftContractAuctions(address,uint256):(uint32,uint256,uint256,uint256,address,address,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Auction__nftContractAuctionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toAddress(),
        value[6].toBoolean()
      )
    );
  }
}

export class InitializeAuctionCall extends ethereum.Call {
  get inputs(): InitializeAuctionCall__Inputs {
    return new InitializeAuctionCall__Inputs(this);
  }

  get outputs(): InitializeAuctionCall__Outputs {
    return new InitializeAuctionCall__Outputs(this);
  }
}

export class InitializeAuctionCall__Inputs {
  _call: InitializeAuctionCall;

  constructor(call: InitializeAuctionCall) {
    this._call = call;
  }

  get _nftContractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get interval(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class InitializeAuctionCall__Outputs {
  _call: InitializeAuctionCall;

  constructor(call: InitializeAuctionCall) {
    this._call = call;
  }
}

export class MakeBidCall extends ethereum.Call {
  get inputs(): MakeBidCall__Inputs {
    return new MakeBidCall__Inputs(this);
  }

  get outputs(): MakeBidCall__Outputs {
    return new MakeBidCall__Outputs(this);
  }
}

export class MakeBidCall__Inputs {
  _call: MakeBidCall;

  constructor(call: MakeBidCall) {
    this._call = call;
  }

  get _nftContractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MakeBidCall__Outputs {
  _call: MakeBidCall;

  constructor(call: MakeBidCall) {
    this._call = call;
  }
}

export class ReceiveNftCall extends ethereum.Call {
  get inputs(): ReceiveNftCall__Inputs {
    return new ReceiveNftCall__Inputs(this);
  }

  get outputs(): ReceiveNftCall__Outputs {
    return new ReceiveNftCall__Outputs(this);
  }
}

export class ReceiveNftCall__Inputs {
  _call: ReceiveNftCall;

  constructor(call: ReceiveNftCall) {
    this._call = call;
  }

  get _nftContractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ReceiveNftCall__Outputs {
  _call: ReceiveNftCall;

  constructor(call: ReceiveNftCall) {
    this._call = call;
  }
}

export class WithdrawNftCall extends ethereum.Call {
  get inputs(): WithdrawNftCall__Inputs {
    return new WithdrawNftCall__Inputs(this);
  }

  get outputs(): WithdrawNftCall__Outputs {
    return new WithdrawNftCall__Outputs(this);
  }
}

export class WithdrawNftCall__Inputs {
  _call: WithdrawNftCall;

  constructor(call: WithdrawNftCall) {
    this._call = call;
  }

  get _nftContractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawNftCall__Outputs {
  _call: WithdrawNftCall;

  constructor(call: WithdrawNftCall) {
    this._call = call;
  }
}

export class WithdrawWinningBidCall extends ethereum.Call {
  get inputs(): WithdrawWinningBidCall__Inputs {
    return new WithdrawWinningBidCall__Inputs(this);
  }

  get outputs(): WithdrawWinningBidCall__Outputs {
    return new WithdrawWinningBidCall__Outputs(this);
  }
}

export class WithdrawWinningBidCall__Inputs {
  _call: WithdrawWinningBidCall;

  constructor(call: WithdrawWinningBidCall) {
    this._call = call;
  }

  get _nftContractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawWinningBidCall__Outputs {
  _call: WithdrawWinningBidCall;

  constructor(call: WithdrawWinningBidCall) {
    this._call = call;
  }
}
